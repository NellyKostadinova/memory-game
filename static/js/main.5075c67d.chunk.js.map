{"version":3,"sources":["components/Utils.js","components/ScoreDisplay.js","components/ImageCard.js","components/ImagesList.js","components/GameOverDisplay.js","components/Game.js","components/LevelSelect.js","App.js","serviceWorker.js","index.js"],"names":["utils","shuffle","arr","i","j","temp","length","Math","floor","random","shorten","slice","ScoreDisplay","props","className","score","ImageCard","useState","isPlayable","setisPlayable","onClick","clickHandler","src","url","alt","id","ImagesList","images","map","img","key","cardClickHandler","GameOverDisplay","gameStatus","Game","cardIsClicked","cardIsPlayable","setState","state","shuffleImages","this","resetGame","React","Component","LevelSelect","htmlFor","name","onChange","e","changeHandler","target","value","App","updateGameLevel","level","gameLevel","createArrayToPlay","initArray","gameId","arrayToPlay","Utils","imgArr","fetch","then","response","json","fetchedImgs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5075c67d.chunk.js","sourcesContent":["let utils = {\r\n  shuffle: function(arr) {\r\n    var i, j, temp;\r\n    for (i = arr.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    }\r\n    return arr;\r\n  },\r\n\r\n  shorten: function(arr, length) {\r\n    return arr.slice(0, length);\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction ScoreDisplay(props) {\r\n  return <div className=\"ScoreDisplay\">Score: {props.score}</div>;\r\n}\r\n\r\nexport default ScoreDisplay;\r\n","import React, { useState } from 'react';\r\nimport '../App.css';\r\n\r\nfunction ImageCard(props) {\r\n  let [isPlayable, setisPlayable] = useState(true);\r\n\r\n  let handleClick = () => {\r\n    if (isPlayable) {\r\n      props.clickHandler(true);\r\n      setisPlayable(false);\r\n    } else {\r\n      props.clickHandler(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ImageCard\" onClick={handleClick}>\r\n      <img src={props.url} alt={props.id} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from 'react';\r\nimport ImageCard from './ImageCard';\r\nimport '../App.css';\r\n\r\nfunction ImagesList(props) {\r\n  return (\r\n    <div className=\"ImagesList\">\r\n      {props.images.map((img) => (\r\n        <ImageCard key={img.id} url={img.url} id={img.id} clickHandler={props.cardClickHandler} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImagesList;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction GameOverDisplay(props) {\r\n  return (\r\n    <div className={'GameOverDisplay ' + props.gameStatus}>\r\n      <h2>{props.gameStatus === 'won' ? 'Nice work!' : 'Game Over!'}</h2>\r\n      <button onClick={props.clickHandler}>Play Again</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverDisplay;\r\n","import React from 'react';\r\nimport ScoreDisplay from './ScoreDisplay';\r\nimport ImagesList from './ImagesList';\r\nimport GameOverDisplay from './GameOverDisplay';\r\nimport '../App.css';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      score: 0,\r\n      gameStatus: 'active'\r\n    };\r\n  }\r\n\r\n  cardIsClicked = (cardIsPlayable) => {\r\n    if (cardIsPlayable) {\r\n      this.setState({ score: this.state.score + 1 }, () => {\r\n        this.props.images.length === this.state.score\r\n          ? this.setState({ gameStatus: 'won' })\r\n          : this.props.shuffleImages(this.props.images);\r\n      });\r\n    } else {\r\n      this.setState({ gameStatus: 'lost' });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Game\">\r\n        <ScoreDisplay score={this.state.score} />\r\n        {this.state.gameStatus === 'active' ? (\r\n          <ImagesList images={this.props.images} cardClickHandler={this.cardIsClicked} />\r\n        ) : (\r\n          <GameOverDisplay clickHandler={this.props.resetGame} gameStatus={this.state.gameStatus} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction LevelSelect(props) {\r\n  const handleChange = (e) => {\r\n    props.changeHandler(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"LevelSelect\">\r\n      <label htmlFor=\"level\">Select game level: </label>\r\n      <select name=\"level\" onChange={handleChange}>\r\n        <option value=\"5\">Easy</option>\r\n        <option value=\"8\">Medium</option>\r\n        <option value=\"10\">Hard</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelSelect;\r\n","import React from 'react';\nimport Utils from './components/Utils';\nimport Game from './components/Game';\nimport './App.css';\nimport LevelSelect from './components/LevelSelect';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameId: 1,\n      gameLevel: 5,\n      initArray: [],\n      arrayToPlay: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://www.splashbase.co/api/v1/images/latest')\n      .then((response) => response.json())\n      .then((fetchedImgs) => {\n        this.setState({ initArray: fetchedImgs.images }, () => {\n          this.createArrayToPlay(this.state.initArray);\n        });\n      });\n  }\n\n  updateGameLevel = (level) => {\n    this.setState({ gameLevel: level }, () => {\n      this.createArrayToPlay(this.state.initArray);\n      this.resetGame();\n    });\n  };\n\n  resetGame = () => {\n    this.setState({ gameId: this.state.gameId + 1 });\n  };\n\n  createArrayToPlay = (arr) => {\n    this.setState({ arrayToPlay: Utils.shorten(arr, this.state.gameLevel) });\n  };\n\n  shuffleImages = (imgArr) => {\n    this.setState({ arrayToPlay: Utils.shuffle(imgArr) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Memory Game</h1>\n          <p>Get points by clicking on an image but don't click on any more than once!</p>\n          <hr />\n          <LevelSelect changeHandler={this.updateGameLevel} />\n        </header>\n        <main>\n          <Game\n            key={this.state.gameId}\n            images={this.state.arrayToPlay}\n            shuffleImages={this.shuffleImages}\n            resetGame={this.resetGame}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}